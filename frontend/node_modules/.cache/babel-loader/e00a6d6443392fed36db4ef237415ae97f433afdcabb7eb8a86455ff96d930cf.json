{"ast":null,"code":"var _jsxFileName = \"/Users/burakgolec/Documents/Programing/React/Web-post/social-media-app/src/pages/DashBoard/DashBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './DashBoard.css';\nimport { fetchContainers } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [containers, setContainers] = useState([]);\n  const [selectedCluster, setSelectedCluster] = useState('all');\n  const [healthStatus, setHealthStatus] = useState({\n    healthy: 0,\n    unhealthy: 0,\n    total: 0\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await fetchContainers();\n        setContainers(data.containers || []);\n        updateHealthStatus(data.containers);\n      } catch (error) {\n        console.error('Dashboard veri yükleme hatası:', error);\n      }\n    };\n    fetchData();\n    const interval = setInterval(fetchData, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  const updateHealthStatus = containers => {\n    const status = containers.reduce((acc, container) => {\n      if (container.State === 'running') acc.healthy++;else acc.unhealthy++;\n      return acc;\n    }, {\n      healthy: 0,\n      unhealthy: 0\n    });\n    status.total = containers.length;\n    setHealthStatus(status);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Docker Y\\xF6netim Paneli\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cluster-selector\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedCluster,\n          onChange: e => setSelectedCluster(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"all\",\n            children: \"T\\xFCm Cluster'lar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"production\",\n            children: \"Production\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"staging\",\n            children: \"Staging\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"nH+8zUHWRQ3G+psuaTuuyn6JJnA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","fetchContainers","jsxDEV","_jsxDEV","Dashboard","_s","containers","setContainers","selectedCluster","setSelectedCluster","healthStatus","setHealthStatus","healthy","unhealthy","total","fetchData","data","updateHealthStatus","error","console","interval","setInterval","clearInterval","status","reduce","acc","container","State","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","_c","$RefreshReg$"],"sources":["/Users/burakgolec/Documents/Programing/React/Web-post/social-media-app/src/pages/DashBoard/DashBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './DashBoard.css';\nimport { fetchContainers } from '../../services/api';\n\nconst Dashboard = () => {\n  const [containers, setContainers] = useState([]);\n  const [selectedCluster, setSelectedCluster] = useState('all');\n  const [healthStatus, setHealthStatus] = useState({\n    healthy: 0,\n    unhealthy: 0,\n    total: 0\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await fetchContainers();\n        setContainers(data.containers || []);\n        updateHealthStatus(data.containers);\n      } catch (error) {\n        console.error('Dashboard veri yükleme hatası:', error);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateHealthStatus = (containers) => {\n    const status = containers.reduce((acc, container) => {\n      if (container.State === 'running') acc.healthy++;\n      else acc.unhealthy++;\n      return acc;\n    }, { healthy: 0, unhealthy: 0 });\n    \n    status.total = containers.length;\n    setHealthStatus(status);\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      <div className=\"dashboard-header\">\n        <h1>Docker Yönetim Paneli</h1>\n        <div className=\"cluster-selector\">\n          <select value={selectedCluster} onChange={(e) => setSelectedCluster(e.target.value)}>\n            <option value=\"all\">Tüm Cluster'lar</option>\n            <option value=\"production\">Production</option>\n            <option value=\"staging\">Staging</option>\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}